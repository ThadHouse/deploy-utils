buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath 'com.jcraft:jsch:0.1.53'
        classpath group: "jaci.gradle", name: "DeployUtils", version: "2019.5.26"
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.0.2'
}

apply plugin: "java"
apply plugin: "cpp"
apply plugin: "c"
apply plugin: "jaci.gradle.DeployUtils"

import edu.wpi.first.deployutils.deploy.*
import edu.wpi.first.deployutils.nativedeps.CombinedNativeLib
import edu.wpi.first.deployutils.nativedeps.NativeLib
import edu.wpi.first.deployutils.toolchains.*

repositories.maven { repo ->
    repo.name = "WPI"
    repo.url = "http://first.wpi.edu/FRC/roborio/maven/release"
}

dependencies {
    compile "edu.wpi.first.wpilibj:wpilibj-java:+"
}

deploy {
    targets {
        target('roborio') {
            directory = '/home/lvuser'
            locations {
                ssh {
                    address = "roborio-5333-frc.local"
                    user = "admin"
                }
                ssh {
                    address = "172.22.11.2"
                    user = "admin"
                }
            }
            failOnMissing = true
            maxChannels = 6
        }
        target('notroborio') {
            directory = '/home/lvuser'
            locations {
                ssh {
                    address = 'does.not.exist'
                    user = 'no'
                }
                ssh {
                    address = 'also.does.not.exist'
                    user = 'no'
                }
            }
            failOnMissing = false
            maxChannels = 6
        }
    }
    artifacts {
        javaArtifact('myJavaArtifact') {
            targets << 'roborio' << 'notroborio'
        }
        fileTreeArtifact('myFileTreeArtifact') {
            files = project.fileTree(dir: 'build')
            directory = "gradle"
            targets << 'roborio' << 'notroborio'
        }
        fileArtifact('myFileArtifact') {
            file = project.file('myfile.dat')
            targets << 'roborio'
        }
        commandArtifact('myCommandArtifact') {
            command = 'uname -a'
            targets << 'roborio' << 'notroborio'
        }
    }
}

model {
    libraries {
        wpi_headers(NativeLib) {
            targetPlatform = "desktop"
            headerDirs = ['']
            maven = "edu.wpi.first.wpilibc:wpilibc:2018.4.1:headers@zip"
            configuration = "wpilib"
        }
        wpi_sources(NativeLib) {
            targetPlatform = "desktop"
            maven = "edu.wpi.first.wpilibc:wpilibc:2018.4.1:windowsx86-64@zip"
            configuration = "wpilibsources"
            staticMatchers = ["**/static/*.lib"];
        }
    }

    platforms {
        desktop {
            architecture 'x86_64'
        }
    }

    toolChains {
        gcc(Gcc)
        visualCpp(VisualCpp)
    }

    components {
        my_program(NativeExecutableSpec) {
            targetPlatform "desktop"

            sources.cpp {
                source.srcDirs "src_c"
            }
            embeddedTools.useLibrary(it, "wpi_headers", "wpi_sources")
        }
    }
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

//model {
//    libraries {
//        def libs = it
//        def common = { NativeLib l ->
//            l.targetPlatform("roborio")
//            l.headerDirs = []
//            l.sourceDirs = []
//            l.staticMatchers = []
//        }
//        def createWpiLibrary = { String name, String mavenBase, String libname ->
//            libs.create("${name}_headers", NativeLib) {
//                common(it)
//                headerDirs << ''
//                maven = "${mavenBase}:headers@zip"
//            }
//
//            libs.create("${name}_athena", NativeLib) {
//                common(it)
//                sharedMatchers = ["**/lib${libname}.so".toString()]
//                dynamicMatchers = sharedMatchers
//                maven = "${mavenBase}:linuxathena@zip"
//            }
//
//            libs.create(name, CombinedNativeLib) {
//                it.libs << "${name}_headers".toString() << "${name}_athena".toString()
//                targetPlatforms = ["roborio"]
//            }
//        }
//
//        createWpiLibrary('wpilibc', "edu.wpi.first.wpilibc:wpilibc:2018.4.1", 'wpilibc')
//        createWpiLibrary('hal', "edu.wpi.first.hal:hal:2018.4.1", 'wpiHal')
//        createWpiLibrary('wpiutil', "edu.wpi.first.wpiutil:wpiutil-cpp:3.1.0", 'wpiutil')
//        createWpiLibrary('ntcore', "edu.wpi.first.ntcore:ntcore-cpp:4.0.0", 'ntcore')
//        createWpiLibrary('cscore', "edu.wpi.first.cscore:cscore-cpp:1.2.0", 'cscore')
//
//        ni_libraries_athena(NativeLib) {
//            common(it)
//            sharedMatchers = ['**/*.so*']
//            dynamicMatchers = []    // NI Libs are not deployed to RIO
//            maven = "edu.wpi.first.ni-libraries:ni-libraries:2018.4.1:linuxathena@zip"
//        }
//
//        ni_libraries_headers(NativeLib) {
//            common(it)
//            headerDirs << ''
//            maven = "edu.wpi.first.ni-libraries:ni-libraries:2018.4.1:headers@zip"
//        }
//
//        ni_libraries(CombinedNativeLib) {
//            it.libs << 'ni_libraries_athena' << 'ni_libraries_headers'
//            targetPlatform = 'roborio'
//        }
//
//        opencv_headers(NativeLib) {
//            common(it)
//            headerDirs << ''
//            maven = "org.opencv:opencv-cpp:3.2.0:headers@zip"
//        }
//
//        opencv_athena(NativeLib) {
//            common(it)
//            dynamicMatchers = ['**/libopencv*.so.*', '**/libopencv*.so']
//            sharedMatchers = ['**/libopencv*.so.*', '**/libopencv*.so']
//            maven = "org.opencv:opencv-cpp:3.2.0:linuxathena@zip"
//        }
//
//        opencv(CombinedNativeLib) {
//            it.libs << 'opencv_athena' << 'opencv_headers'
//            targetPlatforms = ['roborio']
//        }
//
//        wpilib(CombinedNativeLib) {
//            targetPlatform = 'roborio'
//            it.libs << "wpilibc" << "hal" << "wpiutil" << "ntcore" << "cscore" << "opencv" << "ni_libraries"
//        }
//    }
//
//    platforms {
//        'any-32' { architecture "x86" }
//        'any-64' { architecture "x86_64" }
//        roborio { operatingSystem 'linux'; architecture 'arm' }
//    }
//
//    toolChains {
//        roborioGcc(Gcc) {
//            def rootpath = new File(System.getProperty("user.home") + "/.gradle/gradlerio/toolchains/")
//            setTargets('roborio')
//            eachPlatform {
//                defineTools(it, "arm-frc-linux-gnueabi-", '')
//                cppCompiler.withArguments { a -> a << '-std=c++11' << '--sysroot' << rootpath.absolutePath }
//                linker.withArguments { a -> a << '-std=c++11' << '--sysroot' << rootpath.absolutePath }
//            }
//            path new File(rootpath, "bin").absolutePath
//        }
//        gcc(Gcc) { }
//        visualCpp(VisualCpp) { }
//        clang(Clang) { }
//    }
//
//    components {
//        my_program(NativeExecutableSpec) {
//            targetPlatform "roborio"
//
//            sources.cpp {
//                source.srcDirs "src_c"
//            }
//
//            embeddedTools.useLibrary(it, "wpilib")
//        }
//    }
//}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

wrapper {
    gradleVersion = '5.4.1'
}
